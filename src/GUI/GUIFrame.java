package GUI;

import files.IO.TextIO;
import files.Utils.Utilities;
import files.business.Mp3File;
import files.exceptions.DaoException;
import files.text.Mp3FileBinaryDao;
import files.text.Mp3FileSerializeDao;
import files.text.Mp3FileTextDao;
import files.text.Mp3RandomAccessDao;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.WindowAdapter;
import java.io.File;
import java.util.ArrayList;
import java.util.Collections;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;


import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * GUIFrame.java
 *
 * Created on 04-Apr-2011, 13:51:11
 */

/**
 *
 * @author gerry
 */
public class GUIFrame extends javax.swing.JFrame {

    //arraylist to sore read in data and to save data to disk
    ArrayList <Mp3File> mp3Files=new ArrayList<Mp3File>();

    //create text interface object
    ///////////////////////////////////////////////////////////
    Mp3FileTextDao mp3TextDao=new Mp3FileTextDao();
    ///////////////////////////////////////////////////////////

    //create bin interace object
    ///////////////////////////////////////////////////////////
    Mp3FileBinaryDao mp3BinDao=new Mp3FileBinaryDao();
    ///////////////////////////////////////////////////////////

    //create Mp3FileSerializeDao
    ///////////////////////////////////////////////////////////
    Mp3FileSerializeDao mp3SerializeDao=new Mp3FileSerializeDao();
    ///////////////////////////////////////////////////////////

    //random access object
    ///////////////////////////////////////////////////////////
    Mp3RandomAccessDao mp3RandomAccessDao=new Mp3RandomAccessDao();
    ///////////////////////////////////////////////////////////

    //current record
    int iCurrentRecord;

    public enum enumFileMode {
    TEXT,BINARY,RANDOMACCESS,SERIALIAZED
    }





    /** Creates new form GUIFrame */
    public GUIFrame() {
        initComponents();

        ///////////////////////////////////////////////////////////
        //when app closes
        ///////////////////////////////////////////////////////////
        this.addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                dispose();
                System.exit(0);
            }
        });

        //Center frame
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        Dimension size = this.getSize();
        screenSize.height = screenSize.height/2;
        screenSize.width = screenSize.width/2;
        size.height = size.height/2;
        size.width = size.width/2;
        int y = screenSize.height - size.height;
        int x = screenSize.width - size.width;
        this.setLocation(x, y);
        ///////////////////////////////////////////////////////////
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        menuBar1 = new java.awt.MenuBar();
        menu1 = new java.awt.Menu();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtArtist = new javax.swing.JTextField();
        txtAlbum = new javax.swing.JTextField();
        txtTrack = new javax.swing.JTextField();
        txtGenre = new javax.swing.JTextField();
        txtYear = new javax.swing.JTextField();
        cmdEdit = new javax.swing.JButton();
        cmdClear = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        cmdAddNewRecord = new javax.swing.JButton();
        cmdDelete = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        cmdFirst = new javax.swing.JButton();
        cmdPrev = new javax.swing.JButton();
        cmdNext = new javax.swing.JButton();
        cmdLast = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        txtSearch = new javax.swing.JTextField();
        cmdSearch = new javax.swing.JButton();
        cboSearchField = new javax.swing.JComboBox();
        jLabel8 = new javax.swing.JLabel();
        cmdSortCollection = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        lblStatus = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblTable = new javax.swing.JTable();
        cmdTest = new javax.swing.JButton();
        cmdImportSampleData = new javax.swing.JButton();
        cmdClearTable = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        mnuLoadTextDaoFile = new javax.swing.JMenuItem();
        mnuLoadBinaryFile = new javax.swing.JMenuItem();
        mnuLoadSerializedFile = new javax.swing.JMenuItem();
        mnuLoadRandomAccessFile = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        mnuSaveTextDao = new javax.swing.JMenuItem();
        mnuSaveBinDao = new javax.swing.JMenuItem();
        mnuSaveSerialDao = new javax.swing.JMenuItem();
        mnuSaveRandomDao = new javax.swing.JMenuItem();

        menu1.setLabel("File");
        menu1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu1ActionPerformed(evt);
            }
        });
        menuBar1.add(menu1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel1.setText("Artist:");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel2.setText("Album:");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel3.setText("Track:");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel4.setText("Genre:");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel5.setText("Year:");

        txtArtist.setMinimumSize(new java.awt.Dimension(20, 40));

        txtAlbum.setMinimumSize(new java.awt.Dimension(20, 40));

        txtTrack.setMinimumSize(new java.awt.Dimension(20, 40));

        txtGenre.setMinimumSize(new java.awt.Dimension(20, 40));

        txtYear.setText("1900");
        txtYear.setMinimumSize(new java.awt.Dimension(20, 40));

        cmdEdit.setText("Edit");
        cmdEdit.setToolTipText("Edit Record");
        cmdEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdEditActionPerformed(evt);
            }
        });

        cmdClear.setText("Clear");
        cmdClear.setToolTipText("Clear");
        cmdClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdClearActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 36));
        jLabel6.setText("Music DataBase");

        cmdAddNewRecord.setText("Add");
        cmdAddNewRecord.setToolTipText("Press Add to Add a New Record");
        cmdAddNewRecord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdAddNewRecordActionPerformed(evt);
            }
        });

        cmdDelete.setText("Delete");
        cmdDelete.setToolTipText("Delete Record");
        cmdDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDeleteActionPerformed(evt);
            }
        });

        jPanel2.setToolTipText("Navagation Panel");

        cmdFirst.setText("|<<");
        cmdFirst.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFirstActionPerformed(evt);
            }
        });

        cmdPrev.setText("<");
        cmdPrev.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPrevActionPerformed(evt);
            }
        });

        cmdNext.setText(">");
        cmdNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextActionPerformed(evt);
            }
        });

        cmdLast.setText(">>|");
        cmdLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdLastActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(cmdFirst)
                .addGap(18, 18, 18)
                .addComponent(cmdPrev)
                .addGap(18, 18, 18)
                .addComponent(cmdNext)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cmdLast)
                .addContainerGap(33, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(18, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmdFirst)
                    .addComponent(cmdPrev)
                    .addComponent(cmdNext)
                    .addComponent(cmdLast))
                .addContainerGap())
        );

        jLabel7.setText("Search:");

        txtSearch.setText("Enter Search Data...");

        cmdSearch.setText("Search");
        cmdSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSearchActionPerformed(evt);
            }
        });

        cboSearchField.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Artist", "Track", "Album", "Genre", "Year" }));

        jLabel8.setText("Field:");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cmdSearch, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8))
                        .addGap(40, 40, 40)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cboSearchField, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtSearch, javax.swing.GroupLayout.DEFAULT_SIZE, 184, Short.MAX_VALUE))))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cboSearchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addGap(15, 15, 15)
                .addComponent(cmdSearch)
                .addContainerGap(128, Short.MAX_VALUE))
        );

        cmdSortCollection.setText("Sort Data");
        cmdSortCollection.setToolTipText("Sort Data");
        cmdSortCollection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSortCollectionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel1)
                                .addComponent(jLabel3)
                                .addComponent(jLabel5)
                                .addComponent(jLabel2)
                                .addComponent(jLabel4))
                            .addGap(54, 54, 54)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(txtAlbum, javax.swing.GroupLayout.DEFAULT_SIZE, 305, Short.MAX_VALUE)
                                .addComponent(txtTrack, javax.swing.GroupLayout.DEFAULT_SIZE, 305, Short.MAX_VALUE)
                                .addComponent(txtGenre, javax.swing.GroupLayout.DEFAULT_SIZE, 305, Short.MAX_VALUE)
                                .addComponent(txtYear, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtArtist, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(cmdClear)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(cmdAddNewRecord)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(cmdDelete)
                            .addGap(18, 18, 18)
                            .addComponent(cmdEdit)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 63, Short.MAX_VALUE)
                            .addComponent(cmdSortCollection)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(123, 123, 123)))
                .addGap(29, 29, 29)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addComponent(jLabel6)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(txtArtist, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtAlbum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)))
                    .addComponent(jLabel1))
                .addGap(22, 22, 22)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtTrack, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtGenre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(13, 13, 13)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmdClear)
                    .addComponent(cmdAddNewRecord)
                    .addComponent(cmdDelete)
                    .addComponent(cmdEdit)
                    .addComponent(cmdSortCollection))
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(262, 262, 262))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(271, 271, 271))
        );

        jButton1.setText("Exit");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        lblStatus.setFont(new java.awt.Font("Tahoma", 1, 10));
        lblStatus.setText("status");
        lblStatus.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        tblTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Artist", "Album", "Track", "Genre", "Year"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblTable);

        cmdTest.setText("Test");
        cmdTest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdTestActionPerformed(evt);
            }
        });

        cmdImportSampleData.setText("Import Sample Data");
        cmdImportSampleData.setToolTipText("Import Sample Data");
        cmdImportSampleData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdImportSampleDataActionPerformed(evt);
            }
        });

        cmdClearTable.setText("Clear Table");
        cmdClearTable.setToolTipText("Clear Table");
        cmdClearTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdClearTableActionPerformed(evt);
            }
        });

        jMenu1.setText("Load");

        mnuLoadTextDaoFile.setText("LoadTextDao File");
        mnuLoadTextDaoFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuLoadTextDaoFileActionPerformed(evt);
            }
        });
        jMenu1.add(mnuLoadTextDaoFile);

        mnuLoadBinaryFile.setText("Load BinaryDao File");
        mnuLoadBinaryFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuLoadBinaryFileActionPerformed(evt);
            }
        });
        jMenu1.add(mnuLoadBinaryFile);

        mnuLoadSerializedFile.setText("Load Serialized File");
        mnuLoadSerializedFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuLoadSerializedFileActionPerformed(evt);
            }
        });
        jMenu1.add(mnuLoadSerializedFile);

        mnuLoadRandomAccessFile.setText("Load Random Access File");
        mnuLoadRandomAccessFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuLoadRandomAccessFileActionPerformed(evt);
            }
        });
        jMenu1.add(mnuLoadRandomAccessFile);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Save");

        mnuSaveTextDao.setText("Save TextDao");
        mnuSaveTextDao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuSaveTextDaoActionPerformed(evt);
            }
        });
        jMenu2.add(mnuSaveTextDao);

        mnuSaveBinDao.setText("Save BinaryDao");
        mnuSaveBinDao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuSaveBinDaoActionPerformed(evt);
            }
        });
        jMenu2.add(mnuSaveBinDao);

        mnuSaveSerialDao.setText("Save Serialzed Dao");
        mnuSaveSerialDao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuSaveSerialDaoActionPerformed(evt);
            }
        });
        jMenu2.add(mnuSaveSerialDao);

        mnuSaveRandomDao.setText("Save RandomAccess Dao");
        mnuSaveRandomDao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuSaveRandomDaoActionPerformed(evt);
            }
        });
        jMenu2.add(mnuSaveRandomDao);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblStatus, javax.swing.GroupLayout.DEFAULT_SIZE, 443, Short.MAX_VALUE)
                        .addGap(435, 435, 435)
                        .addComponent(jButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 903, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 138, Short.MAX_VALUE)
                                            .addComponent(cmdTest))
                                        .addGroup(layout.createSequentialGroup()
                                            .addGap(41, 41, 41)
                                            .addComponent(cmdImportSampleData)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(cmdClearTable)))))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(56, 56, 56)
                        .addComponent(cmdImportSampleData)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 125, Short.MAX_VALUE)
                        .addComponent(cmdTest)
                        .addGap(53, 53, 53)
                        .addComponent(cmdClearTable)
                        .addGap(18, 18, 18))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 307, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 277, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblStatus, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addContainerGap())))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void menu1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_menu1ActionPerformed

    private void cmdClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdClearActionPerformed
        // TODO add your handling code here:
        clearTextBoxes();
    }//GEN-LAST:event_cmdClearActionPerformed

    private void cmdFirstActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFirstActionPerformed
        // TODO add your handling code here:
        displayFirstRecord();

    }//GEN-LAST:event_cmdFirstActionPerformed

    private void cmdLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdLastActionPerformed
        // TODO add your handling code here:
        displayLastRecord();
    }//GEN-LAST:event_cmdLastActionPerformed

    private void cmdPrevActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPrevActionPerformed
        // TODO add your handling code here:
        if(iCurrentRecord-1 > -1)
        {
            iCurrentRecord--;
            Mp3File mp3=getRecord(iCurrentRecord);
            displayRecord(mp3);
        }
    }//GEN-LAST:event_cmdPrevActionPerformed

    private void cmdNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextActionPerformed
        // TODO add your handling code here:

        if(iCurrentRecord+1 <mp3Files.size())
        {
            iCurrentRecord++;
            Mp3File mp3=getRecord(iCurrentRecord);
            displayRecord(mp3);

        }
    }//GEN-LAST:event_cmdNextActionPerformed

    private void mnuLoadTextDaoFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuLoadTextDaoFileActionPerformed

        Load_File(enumFileMode.TEXT);
    }//GEN-LAST:event_mnuLoadTextDaoFileActionPerformed

    private void cmdEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdEditActionPerformed

            // TODO add your handling code here:
            Mp3File mp3File1 = getTextBoxData();
            mp3Files.set(iCurrentRecord, mp3File1);

            refreshData();
            
    }//GEN-LAST:event_cmdEditActionPerformed

    private void cmdDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDeleteActionPerformed
        // TODO add your handling code here:

        mp3Files.remove(iCurrentRecord);

        refreshData();


        /*try {
            // TODO add your handling code here:
            //delete
            mp3TextDao.delete(iCurrentRecord);
            //read data in
            mp3Files = mp3TextDao.findAll();

            printStatus("Deleted Record :[" + iCurrentRecord + "] sucessfully.");

        } catch (DaoException ex) {
            Logger.getLogger(GUIFrame.class.getName()).log(Level.SEVERE, null, ex);
        }*/
    }//GEN-LAST:event_cmdDeleteActionPerformed

    private void cmdAddNewRecordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdAddNewRecordActionPerformed
        // TODO add your handling code here:
        //get the text in textboxes
        Mp3File mp3=getTextBoxData();

        mp3Files.add(mp3);

        refreshData();
        
        /*try {
            mp3TextDao.add(mp3);
            printStatus("Added Record sucessfully.");

            //read data in
            mp3Files = mp3TextDao.findAll();

            displayFirstRecord();
            
        } catch (DaoException ex) {
            Logger.getLogger(GUIFrame.class.getName()).log(Level.SEVERE, null, ex);
        }*/

    }//GEN-LAST:event_cmdAddNewRecordActionPerformed

    private void cmdSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSearchActionPerformed
        // TODO add your handling code here:
        String sSearchField="";
        String sSearchVal="";

        //arraylist to hold the result of our search
        ArrayList<Mp3File> mp3SearchResults = new ArrayList<Mp3File>();


        sSearchVal=txtSearch.getText();
        sSearchField=cboSearchField.getSelectedItem().toString();


        //utilsclass has the search methods
        if(sSearchField.compareTo("Artist")==0)
        {
            mp3SearchResults=Utilities.searchArrayListForArtist(mp3Files, sSearchVal);
        }
        else if(sSearchField.compareTo("Album")==0)
        {
            mp3SearchResults=Utilities.searchArrayListForAlbum(mp3Files, sSearchVal);
        }
        else if(sSearchField.compareTo("Track")==0)
        {
            mp3SearchResults=Utilities.searchArrayListForTrack(mp3Files, sSearchVal);
        }
        else if(sSearchField.compareTo("Genre")==0)
        {
            mp3SearchResults=Utilities.searchArrayListForGenre(mp3Files, sSearchVal);
        }
        else if(sSearchField.compareTo("Year")==0)
        {
             mp3SearchResults=Utilities.searchArrayListForYear(mp3Files, Integer.parseInt(sSearchVal));
        }

        //now process the results
        if(mp3SearchResults.size()>0)
        {
            //display in table
            //clear table first!!
            addToTable(mp3SearchResults);
        }
        else
        {
            //no results found
            Utilities.showMsgBox("No results found searching by " + sSearchField + " for '" +  sSearchVal +"'.");
        }

    }//GEN-LAST:event_cmdSearchActionPerformed

    private void cmdTestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdTestActionPerformed
        // TODO add your handling code here:        
        
    }//GEN-LAST:event_cmdTestActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        System.exit(0); 
    }//GEN-LAST:event_jButton1ActionPerformed

    private void mnuLoadBinaryFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuLoadBinaryFileActionPerformed
        // TODO add your handling code here:
        Load_File(enumFileMode.BINARY);
    }//GEN-LAST:event_mnuLoadBinaryFileActionPerformed

    private void mnuLoadSerializedFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuLoadSerializedFileActionPerformed
        Load_File(enumFileMode.SERIALIAZED);
    }//GEN-LAST:event_mnuLoadSerializedFileActionPerformed

    private void mnuLoadRandomAccessFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuLoadRandomAccessFileActionPerformed
        Load_File(enumFileMode.RANDOMACCESS);
    }//GEN-LAST:event_mnuLoadRandomAccessFileActionPerformed

    private void mnuSaveRandomDaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuSaveRandomDaoActionPerformed

        try {
            // TODO add your handling code here:
            if(mp3Files.size()>0)
            {
                mp3RandomAccessDao.saveFile(mp3Files);
                printStatus("Saved File: " + mp3RandomAccessDao.getFileName());

                //reload file back
                Load_File(enumFileMode.RANDOMACCESS);
           }
            else
                Utilities.showMsgBox("Error: Nothing to save, Press the Add button First.");

        } catch (DaoException ex) {
            Logger.getLogger(GUIFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_mnuSaveRandomDaoActionPerformed

    private void mnuSaveTextDaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuSaveTextDaoActionPerformed
        try {
            // TODO add your handling code here:
            if(mp3Files.size()>0)
            {
                mp3TextDao.saveFile(mp3Files);

                printStatus("Saved File: " + mp3TextDao.getFileName());

                //reload file back
                Load_File(enumFileMode.TEXT);
            }
            else
                Utilities.showMsgBox("Error: Nothing to save, Press the Add button First.");
        } catch (DaoException ex) {
            Logger.getLogger(GUIFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_mnuSaveTextDaoActionPerformed

    private void mnuSaveBinDaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuSaveBinDaoActionPerformed
        try {
            // TODO add your handling code here:
            if(mp3Files.size()>0)
            {
                mp3BinDao.saveFile(mp3Files);
                printStatus("Saved File: " + mp3BinDao.getFileName());

                //reload file back
                Load_File(enumFileMode.BINARY);
            }
            else
                Utilities.showMsgBox("Error: Nothing to save, Press the Add button First.");
        } catch (DaoException ex) {
            Logger.getLogger(GUIFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_mnuSaveBinDaoActionPerformed

    private void mnuSaveSerialDaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuSaveSerialDaoActionPerformed
        try {
            // TODO add your handling code here:
            if(mp3Files.size()>0)
            {
                mp3SerializeDao.saveFile(mp3Files);
                printStatus("Saved File: " + mp3SerializeDao.getFileName());

                //reload file back
                Load_File(enumFileMode.SERIALIAZED);
            }
            else
                Utilities.showMsgBox("Error: Nothing to save, Press the Add button First.");
        } catch (DaoException ex) {
            Logger.getLogger(GUIFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_mnuSaveSerialDaoActionPerformed

    private void cmdSortCollectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSortCollectionActionPerformed
        // TODO add your handling code here:
        //sort array list
        Collections.sort(mp3Files);
        refreshData();
    }//GEN-LAST:event_cmdSortCollectionActionPerformed

    private void cmdImportSampleDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdImportSampleDataActionPerformed
        // TODO add your handling code here:
        //mrdjexportjava.txt
        mp3Files=TextIO.readFile(new File("mrdjexportjava.txt"));
        refreshData();
    }//GEN-LAST:event_cmdImportSampleDataActionPerformed

    private void cmdClearTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdClearTableActionPerformed
        // TODO add your handling code here:
        clearTable();
    }//GEN-LAST:event_cmdClearTableActionPerformed

    private void refreshData()
    {
        displayFirstRecord();
        clearTable();
        //reaload arraylist into table after sort
        addToTable(mp3Files);
    }

    private void clearTable()
    {
        //get table model object
        DefaultTableModel model=(DefaultTableModel) tblTable.getModel();
        model.setRowCount(0);
    }


    //adds an array list to the table and removes any data in it
    private void addToTable(ArrayList <Mp3File> mp3FilesList)
    {
    //get table model object
    DefaultTableModel model=(DefaultTableModel) tblTable.getModel();

    String sArtist="";
    String sAlbum="";
    String sGenre="";
    int iYear=0;
    String sTrack="";

    try
    {
       if(mp3FilesList.size()>0)
       {
            //clear table first
            clearTable();
            for(int row=0;row<mp3FilesList.size();row++)
            {
                //get data
                sArtist=mp3FilesList.get(row).getsArtist();
                sAlbum=mp3FilesList.get(row).getsAlbum();
                sGenre=mp3FilesList.get(row).getsGenre();
                iYear=mp3FilesList.get(row).getiYear();
                sTrack=mp3FilesList.get(row).getsTrack();

                // inset row
                model.insertRow(row, new Object[]{sArtist,sAlbum,sTrack,sGenre,iYear});
                //art,albu,track,genre year
            }
        }
       else
       {
           Utilities.showMsgBox("No Data to display in Table.");
       }
     }
    catch(Exception e)
    {
        System.out.println("Error Adding to table: " + e.getMessage());
    }

       
    }

    //my code
    private void displayRecord(Mp3File mp3)
    {
        int iYear;
        //load data into text boxes
        txtAlbum.setText(mp3.getsAlbum());
        txtArtist.setText(mp3.getsArtist());
        txtGenre.setText(mp3.getsGenre());
        txtTrack.setText(mp3.getsTrack());

        iYear=mp3.getiYear();
        txtYear.setText(Integer.toString(iYear));

        //status
        printStatus("Displaying Record: [" + iCurrentRecord + "]");
    }

    private Mp3File getTextBoxData()
    {
        Mp3File mp3=new Mp3File();
        int iYear;
        String sTemp;

        //return an object of the data in the text box
        mp3.setsArtist(txtArtist.getText());
        mp3.setsAlbum(txtAlbum.getText());
        mp3.setsGenre(txtGenre.getText());
        mp3.setsTrack(txtTrack.getText());

        sTemp=txtYear.getText();
        //possabl error when a string is entered as a ayerar
        try{
            mp3.setiYear(Integer.parseInt(sTemp));
        }
        catch(NumberFormatException e)
        {
            mp3.setiYear(0);
        }

        return mp3;
    }

    //get a record from our arraylist and return it
    private Mp3File getRecord(int iRecord)
    {
        Mp3File mp3=new Mp3File();

        if(iRecord>-1 && iRecord<mp3Files.size())
        {
            mp3=mp3Files.get(iRecord);
        }

        return mp3;
    }

    //display status bar messages
    private void printStatus(String s)
    {
        lblStatus.setText(s);
    }

    //display first record
    private void displayFirstRecord()
    {
        iCurrentRecord=0;
        Mp3File mp3=getRecord(iCurrentRecord);
        displayRecord(mp3);
    }

    //last
    private void displayLastRecord()
    {
        iCurrentRecord=mp3Files.size()-1;
        Mp3File mp3=getRecord(iCurrentRecord);
        displayRecord(mp3);
    }


    private void clearTextBoxes()
    {
        txtArtist.setText("");
        txtAlbum.setText("");
        txtGenre.setText("");
        txtTrack.setText("");
        txtYear.setText("");
    }

    //load the correct file mode and file
    private void Load_File(enumFileMode filemode)
    {
        int icount;
        String sFileLoaded="";
        //load all records
        try {


            if(filemode==filemode.TEXT)
            {
                mp3Files = mp3TextDao.findAll();                
                sFileLoaded=mp3TextDao.getFileName();
            }
            else if(filemode==filemode.BINARY)
            {
               mp3Files = mp3BinDao.findAll();
               sFileLoaded=mp3BinDao.getFileName();
            }
            else if(filemode==filemode.RANDOMACCESS)
            {
                mp3Files = mp3RandomAccessDao.findAll();
                sFileLoaded=mp3RandomAccessDao.getFileName();
            }
            else if(filemode==filemode.SERIALIAZED)
            {
                mp3Files = mp3SerializeDao.findAll();
                sFileLoaded=mp3SerializeDao.getFileName();
            }
            else
            {
                System.out.println("Error Loading Files: Load_File()");
            }

            this.setTitle("Loaded File: " +sFileLoaded);



            icount=mp3Files.size();

            if(icount>0)
            {
                iCurrentRecord=0;
                //display first record
                Mp3File mp3=getRecord(iCurrentRecord);
                displayRecord(mp3);                
                //status
                printStatus("Loaded " + icount + " records.");
                //display in table
                addToTable(mp3Files);
            }
            else
            {
                //status
                printStatus("Error Loading File. " + sFileLoaded);
            }

        } catch (DaoException ex) {
            Logger.getLogger(GUIFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUIFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox cboSearchField;
    private javax.swing.JButton cmdAddNewRecord;
    private javax.swing.JButton cmdClear;
    private javax.swing.JButton cmdClearTable;
    private javax.swing.JButton cmdDelete;
    private javax.swing.JButton cmdEdit;
    private javax.swing.JButton cmdFirst;
    private javax.swing.JButton cmdImportSampleData;
    private javax.swing.JButton cmdLast;
    private javax.swing.JButton cmdNext;
    private javax.swing.JButton cmdPrev;
    private javax.swing.JButton cmdSearch;
    private javax.swing.JButton cmdSortCollection;
    private javax.swing.JButton cmdTest;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblStatus;
    private java.awt.Menu menu1;
    private java.awt.MenuBar menuBar1;
    private javax.swing.JMenuItem mnuLoadBinaryFile;
    private javax.swing.JMenuItem mnuLoadRandomAccessFile;
    private javax.swing.JMenuItem mnuLoadSerializedFile;
    private javax.swing.JMenuItem mnuLoadTextDaoFile;
    private javax.swing.JMenuItem mnuSaveBinDao;
    private javax.swing.JMenuItem mnuSaveRandomDao;
    private javax.swing.JMenuItem mnuSaveSerialDao;
    private javax.swing.JMenuItem mnuSaveTextDao;
    private javax.swing.JTable tblTable;
    private javax.swing.JTextField txtAlbum;
    private javax.swing.JTextField txtArtist;
    private javax.swing.JTextField txtGenre;
    private javax.swing.JTextField txtSearch;
    private javax.swing.JTextField txtTrack;
    private javax.swing.JTextField txtYear;
    // End of variables declaration//GEN-END:variables

}
